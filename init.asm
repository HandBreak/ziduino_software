
; Определение переме хранения используемых переменных:
CONFIG_PORT:	equ 0feh	; Адрес порта управления конфигурацией системы
; CONFIG_PORT PORT_BITMAP:
;	bit0	- SPK		Выход звука (0=GATE OFF)
;	bit1	- !GISM		Разрешение прерываний от сумматора
;	bit2	- DAMODE	Режим работы ЦАП (Прямое преобразование/по таблице сумматором)
;	bit3	- DAC-CLR	Сброс ЦАП
;	bit4	- TG		Запрет таймера i8254 для NMI прерываний
;	bit5	-		Управление  ЦАП !DAA2/!DWR
;	bit6	- P1-P2		Выбор страницы памяти
;	bit7	- P3-P4		Выбор страницы памяти
;
TM_MODE_PORT:	equ 0fch	; Адрес порта выбора режима работы таймера (11111100b)
TM_COUNT_PORT:	equ 0bch	; Адрес порта счетчика (10111100b) сначала загружается младший, затем старший
   STACK_POINT:	equ 3ce0h	; Верхняя граница стека (растёт вниз к 3ca0, где заканчивается буфер сканера устройств -128 байт. Резерв 64 байта или 32 вложения)
;! STACK_POINT:	equ 8100h	; Верхняя граница стека (растёт вниз к 8000, где заканчивается буфер)
;

; ==============================
; Начальная инициализация системы
; input:
;	none
; output:
;	none
; ------------------------------
RESET:
	di			; Запрещаем прерывания
	ld sp,STACK_POINT	; Устанавливаем стек
; Reset control register
	ld a,0			; Устанавливаем регистр конфигурации
	out (CONFIG_PORT),a	; Сбрасываем все выходы регистра управления (#FE) 
; Set VI54 timer
; 				  Устанавливем частоту CPU INT = 25Hz
	ld a,10110100b		; (#B4) Управляющее слово -> (10) 2-ой канал. (11) Запись слова [2байта]. (010) Режим 2, (0) Двоичный 
	out (TM_MODE_PORT),a	; (#FC) Записываем его в регистр режима работы (загружаем режим работы) A1=A0=1 (А6=А7), Адрес порта xCh
	ld a,11111111b		; (#FF) Готовим значение младшего байта для загрузки в счетчик  = FFh
	out (TM_COUNT_PORT),a	; (#BC) Записываем его в счетчик 2 (младший)
	ld a,11111111b		; (#FF) Готовим значение старшего байта для загрузки в счетчик  = FFh	
	out (TM_COUNT_PORT),a	; (#BC) Записываем его в счетчик 2 (старший)
; Set interrupt mode
	im 1			; Включаем режим прерываний IM1 (вызов п/п по адресу 0038h)
	jr MTEST		; Переход к тестированию памяти
; ------------------------------
;
; ==============================
; MT12864 Print Current Position
; with scroll	RST18h
; input:
;	DE - Address string in
;	     memory. End = 00h
; output:
;	none
; ------------------------------
PRINT_CRSCR:			; Вызов через RST18h
	ld l,(ix+prn_y)
	ld h,(ix+prn_x)
	call PRN_WSCROLL	; напечатать строку переданную строку в текущей позиции
PRINT_SETPOS:	
	ld (ix+prn_y),l
	ld (ix+prn_x),h
	ret
; ------------------------------
;
; ==============================
; MT12864 Print Current Position
; input:	RST28h
;	DE - Address string in
;	     memory. End = 00h
; output:
;	none
; ------------------------------
PRINT_CURR:			; Вызов через RST28h
	ld l,(ix+prn_y)
	ld h,(ix+prn_x)
	call PRN_STRING		; напечатать строку переданную строку в текущей позиции
	ld (ix+prn_y),l
	ld (ix+prn_x),h
	ret
; ------------------------------
; 	АДРЕС 0038h
	jp INT38		; Вызов через RST38h  - Переход на обработчик прерывания
; ------------------------------