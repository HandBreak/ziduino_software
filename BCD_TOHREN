;	xor a
;	ld b,a			;
;	ld c,a			; Очистим регистр остатка (результата преобразования)
; CONV_BCD2BIN_NLP:
;	push hl			; Сохраним конец входного буфера
;	or a			; CY<-0
;	ex af,af'
;	xor a			; Обнуляем альтернативный 'A'
;	ex af,af'
; CONV_BCD2BIN_NXT:
;	rr (hl)			; /2
;	ex af,af'		; Сохранить CY и A (результат сдвига)
;	or (hl)			; Сбросить CY перед SBC HL.DE и собрать в Аккумулятор остаток в (HL) для последующего контроля на '0'
;	dec hl			; Предыдущий байт
;	sbc hl,de		; HL<DE (начала буфера) ?
;	jr c,CONV_BCD2BIN_ELP	; Если ушли дальше начала входного буфера перейти к восстановлению адреса буфера и повтору полного цикла
;	add hl,de		; Восстановить адрес текущей ячейки
;	ex af,af'		; Восстановить результат :2
;	jr CONV_BCD2BIN_NXT	; произвести деление предыдущего байта (младшего разряда)
; CONV_BCD2BIN_ELP:
;	pop hl			; Восстановить адрес конца входного буфера
;	or a			; A=0 ?
;	jr nz,CONV_BCD2BIN_RLBC	; Если делимое = 0 выход из подпрограммы
;	ex af,af'
;	ret nc			; Закончить без BCx2, если CY=0, иначе
;	rl c
;	rl b
;	ret
; CONV_BCD2BIN_RLBC:
;	ex af,af'		; восстановить A и CY после rr (hl)
;	rl c			; C0 <-CY
;	rl b			; BC <-CY (остаток от деления)
;	jr CONV_BCD2BIN_NLP	; Начать следующий цикл :2 (требуется проверка на 0 в делимом)